{
    "files.associations": {
        "iostream": "cpp",
        "ostream": "cpp",
        "vector": "cpp"
    },
    // "C_Cpp.errorSquiggles": "disabled",
    // "C_Cpp.intelliSenseEngineFallback": "disabled",
    "C_Cpp.intelliSenseEngine": "disabled",
    // "C_Cpp.autocomplete": "disabled", // So you don't get autocomplete from both extensions.
    // Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)
    "clangd.arguments": [
        "--log=verbose", // 让 Clangd 生成更详细的日志
        "--pretty", // 输出的 JSON 文件更美观
        "--all-scopes-completion", // 全局补全(输入时弹出的建议将会提供 CMakeLists.txt 里配置的所有文件中可能的符号，会自动补充头文件)
        "--completion-style=detailed", // 建议风格：打包(重载函数只会给出一个建议）相反可以设置为detailed
        "--cross-file-rename", // 跨文件重命名变量
        "--header-insertion=iwyu", // 允许补充头文件
        "--header-insertion-decorators", // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--background-index", // 在后台自动分析文件(基于 complie_commands，我们用CMake生成)
        "--clang-tidy=false", // 是否启用 Clang-Tidy 以提供「静态检查」
        // 已失效，需要在.clang-tidy中配置
        // Clang-Tidy 静态检查的参数，指出按照哪些规则进行静态检查，详情见「与按照官方文档配置好的 VSCode 相比拥有的优势」
        // 参数后部分的*表示通配符
        // 在参数前加入-，如-modernize-use-trailing-return-type，将会禁用某一规则
        //"--clang-tidy-checks=cppcoreguidelines-*,performance-*,bugprone-*,portability-*,modernize-*,google-*",
        //"--fallback-style=file",  // 默认格式化风格: 谷歌开源项目代码指南
        "-j=12", // 同时开启的任务数量
        "--pch-storage=disk", // pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能) 推荐在板子上使用disk
        //"--function-arg-placeholders=false",// 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        "--compile-commands-dir=build", // compelie_commands.json 文件的目录位置(相对于工作区，由于 CMake 生成的该文件默认在 build 文件夹中，故设置为 build)
    ],
    "lldb.showDisassembly": "auto",
    "lldb.dereferencePointers": true,
    "lldb.consoleMode": "commands",
    "lldb.displayFormat": "auto",
}